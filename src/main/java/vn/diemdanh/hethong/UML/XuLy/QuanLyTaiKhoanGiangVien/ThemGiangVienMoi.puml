@startuml
title Thêm Tài khoản Giảng viên Mới

actor "Admin" as admin
participant "DanhSachTaiKhoanGV\nComponent" as frontend
participant "Ant Design\nModal & Form" as modal
participant "userService.js" as service
participant "UserController" as controller
participant "UserService" as userService
participant "UserRepository" as repository
participant "PasswordEncoder" as encoder
database "Database" as db

== Mở Form Thêm Mới ==
admin -> frontend: Click button "Thêm Giảng viên"
activate frontend
frontend -> frontend: setIsModalVisible(true)
frontend -> frontend: setEditingTeacher(null) - Reset form
frontend -> modal: Hiển thị Modal
activate modal
modal -> modal: Form.useForm() - Tạo form instance
modal -> modal: form.resetFields() - Reset các trường
modal -> admin: Hiển thị form
deactivate modal

== Validation và Submit ==
admin -> modal: Điền thông tin và click "Lưu"
activate modal
modal -> frontend: onFinish(values)
deactivate modal
activate frontend
frontend -> frontend: handleSubmit(values)
frontend -> frontend: form.validateFields() - Validate client-side

frontend -> frontend: Tạo payload:\n{\n  username: values.username,\n  password: values.password,\n  fullName: values.fullName,\n  email: values.email,\n  role: 'TEACHER',\n  isActive: values.isActive ?? true\n}

frontend -> service: createUser(payload)
activate service
service -> controller: POST /api/users
note right: Content-Type: application/json\nAuthorization: Bearer <jwt-token>
activate controller

controller -> controller: Validate request body
controller -> userService: createUser(userDto)
activate userService

== Kiểm tra trùng lặp ==
userService -> repository: existsByEmail(email)
activate repository
repository -> db: SELECT COUNT(*) FROM users WHERE email = ?
db --> repository: count
repository --> userService: boolean
deactivate repository

userService -> repository: existsByUsername(username)
activate repository
repository -> db: SELECT COUNT(*) FROM users WHERE username = ?
db --> repository: count
repository --> userService: boolean
deactivate repository

alt Email hoặc Username đã tồn tại
    userService --> controller: throw new RuntimeException("Email/Username đã tồn tại")
    controller --> service: 400 Bad Request\n{"error": "Email hoặc Username đã tồn tại"}
    service --> frontend: Error response
    frontend -> frontend: message.error("Email hoặc Username đã tồn tại")
    frontend -> admin: Hiển thị lỗi, giữ modal mở
else Thông tin hợp lệ
    == Tạo tài khoản mới ==
    userService -> encoder: encode(password)
    activate encoder
    encoder --> userService: hashedPassword
    deactivate encoder

    userService -> userService: Tạo User entity:\n- username, email, fullName\n- password (đã hash)\n- role: TEACHER\n- userType: GIAO_VIEN\n- active: isActive\n- createdAt: now()\n- updatedAt: now()

    userService -> repository: save(newUser)
    activate repository
    repository -> db: INSERT INTO users\n(username, email, fullName, password,\n role, userType, active, createdAt, updatedAt)\nVALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
    db --> repository: Saved User entity
    repository --> userService: User entity with generated ID
    deactivate repository

    userService -> userService: Convert User to UserDto\n(không bao gồm password)
    userService --> controller: UserDto
    deactivate userService

    controller --> service: 201 Created\n{"id": 123, "username": "...", ...}
    deactivate controller
    service --> frontend: Success response with user data
    deactivate service

    frontend -> frontend: message.success("Thêm giảng viên thành công")
    frontend -> frontend: setIsModalVisible(false) - Đóng modal
    frontend -> frontend: form.resetFields() - Reset form
    frontend -> frontend: fetchTeachers() - Refresh danh sách
    frontend -> admin: Đóng modal, cập nhật danh sách với bản ghi mới
end
deactivate frontend

@enduml