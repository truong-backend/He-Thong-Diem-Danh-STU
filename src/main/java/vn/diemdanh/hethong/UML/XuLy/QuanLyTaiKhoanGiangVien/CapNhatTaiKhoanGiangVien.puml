@startuml
title Cập nhật Tài khoản Giảng viên

actor "Admin" as admin
participant "DanhSachTaiKhoanGV\nComponent" as frontend
participant "Ant Design\nModal & Form" as modal
participant "userService.js" as service
participant "UserController" as controller
participant "UserService" as userService
participant "UserRepository" as repository
database "Database" as db

== Mở Form Cập nhật ==
admin -> frontend: Click button "Sửa"
activate frontend
frontend -> frontend: openModal(record)
frontend -> frontend: setEditingTeacher(record)
frontend -> frontend: setIsModalVisible(true)
frontend -> modal: Hiển thị Modal
activate modal
modal -> modal: form.setFieldsValue

modal -> admin: Hiển thị form

deactivate modal

== Validation và Submit ==
admin -> modal: Chỉnh sửa thông tin và click "Lưu"
activate modal
modal -> frontend: onFinish(values)
deactivate modal
activate frontend
frontend -> frontend: handleSubmit(values)
frontend -> frontend: form.validateFields()

frontend -> frontend: Tạo payload


frontend -> service: updateUser(editingTeacher.id, payload)
activate service
service -> controller: PUT /api/users/{id}
activate controller

controller -> controller: Validate request body và path variable
controller -> userService: updateUser(id, userDto)
activate userService

== Tìm User cần cập nhật ==
userService -> repository: findById(id)
activate repository
repository -> db: Truy vấn
db --> repository: User entity (or null)
repository --> userService: Optional<User>
deactivate repository

alt User không tồn tại
    userService --> controller: throw Giảng viên không tồn tại
    controller --> service: 404 Not Found\n{"error": "Giảng viên không tồn tại"}
    service --> frontend: Error response
    frontend -> frontend: message.error("Giảng viên không tồn tại")
    frontend -> admin: Hiển thị lỗi
else User tồn tại
    == Kiểm tra trùng lặp (nếu thay đổi email/username) ==
    alt Email khác \n với email hiện tại
        userService -> repository: Kểm tra trùng
        activate repository
        repository -> db: Truy vấn
        db --> repository: count
        repository --> userService: boolean
        deactivate repository
        alt Email đã tồn tại
            userService --> controller: throw Email đã tồn tại
            controller --> service: 400 Bad Request
            service --> frontend: Error response
            frontend -> admin: Hiển thị lỗi email trùng
        end
    end

    alt Username khác \n với username \nhiện tại
        userService -> repository: Kiểm tra trùng
        activate repository
        repository -> db: Truy vấn
        db --> repository: count
        repository --> userService: boolean
        deactivate repository
        alt Username đã tồn tại
            userService --> controller: throw Username đã tồn tại
            controller --> service: 400 Bad Request
            service --> frontend: Error response
            frontend -> admin: Hiển thị lỗi
        end
    end

    == Cập nhật thông tin ==
    userService -> userService: Update


    userService -> repository: save(updatedUser)
    activate repository
    repository -> db: Truy vấn
    db --> repository: Updated User entity
    repository --> userService: User entity
    deactivate repository

    userService -> userService: Convert User to UserDto
    userService --> controller: Updated UserDto
    deactivate userService

    controller --> service: 200 OK\n{"id": 123, "username": "...", ...}
    deactivate controller
    service --> frontend: Success response
    deactivate service

    frontend -> frontend: message.success
    frontend -> frontend: setIsModalVisible(false)
    frontend -> frontend: setEditingTeacher(null)
    frontend -> frontend: fetchTeachers()
    frontend -> admin: Đóng modal\nvà hiện thông báo
end
deactivate frontend

@enduml