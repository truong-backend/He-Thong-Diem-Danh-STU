@startuml
title Cập nhật Tài khoản Giảng viên

actor "Admin" as admin
participant "DanhSachTaiKhoanGV\nComponent" as frontend
participant "Ant Design\nModal & Form" as modal
participant "userService.js" as service
participant "UserController" as controller
participant "UserService" as userService
participant "UserRepository" as repository
database "Database" as db

== Mở Form Cập nhật ==
admin -> frontend: Click button "Sửa" trên dòng giảng viên
activate frontend
frontend -> frontend: openModal(record)
frontend -> frontend: setEditingTeacher(record) - Lưu thông tin đang sửa
frontend -> frontend: setIsModalVisible(true)
frontend -> modal: Hiển thị Modal
activate modal
modal -> modal: form.setFieldsValue({\n  username: record.username,\n  fullName: record.fullName,\n  email: record.email,\n  isActive: record.active\n})
note right: Không điền password\nvì không cho phép sửa
modal -> admin: Hiển thị form đã điền sẵn thông tin hiện tại
note right: Form fields:\n- Username (filled)\n- Họ và tên (filled)\n- Email (filled)\n- Trạng thái (filled)\n- Password (hidden/disabled)
deactivate modal

== Validation và Submit ==
admin -> modal: Chỉnh sửa thông tin và click "Lưu"
activate modal
modal -> frontend: onFinish(values)
deactivate modal
activate frontend
frontend -> frontend: handleSubmit(values)
frontend -> frontend: form.validateFields()

frontend -> frontend: Tạo payload:\n{\n  username: values.username,\n  fullName: values.fullName,\n  email: values.email,\n  isActive: values.isActive\n}
note right: Không gửi password\ntrong payload update

frontend -> service: updateUser(editingTeacher.id, payload)
activate service
service -> controller: PUT /api/users/{id}
note right: URL params: id = editingTeacher.id\nContent-Type: application/json
activate controller

controller -> controller: Validate request body và path variable
controller -> userService: updateUser(id, userDto)
activate userService

== Tìm User cần cập nhật ==
userService -> repository: findById(id)
activate repository
repository -> db: SELECT * FROM users WHERE id = ?
db --> repository: User entity (or null)
repository --> userService: Optional<User>
deactivate repository

alt User không tồn tại
    userService --> controller: throw new RuntimeException("Giảng viên không tồn tại")
    controller --> service: 404 Not Found\n{"error": "Giảng viên không tồn tại"}
    service --> frontend: Error response
    frontend -> frontend: message.error("Giảng viên không tồn tại")
    frontend -> admin: Hiển thị lỗi
else User tồn tại
    == Kiểm tra trùng lặp (nếu thay đổi email/username) ==
    alt Email khác với email hiện tại
        userService -> repository: existsByEmailAndIdNot(email, id)
        activate repository
        repository -> db: SELECT COUNT(*) FROM users\nWHERE email = ? AND id != ?
        db --> repository: count
        repository --> userService: boolean
        deactivate repository
        alt Email đã tồn tại
            userService --> controller: throw new RuntimeException("Email đã tồn tại")
            controller --> service: 400 Bad Request
            service --> frontend: Error response
            frontend -> admin: Hiển thị lỗi email trùng
        end
    end

    alt Username khác với username hiện tại
        userService -> repository: existsByUsernameAndIdNot(username, id)
        activate repository
        repository -> db: Truy vấn
        db --> repository: count
        repository --> userService: boolean
        deactivate repository
        alt Username đã tồn tại
            userService --> controller: throw new RuntimeException("Username đã tồn tại")
            controller --> service: 400 Bad Request
            service --> frontend: Error response
            frontend -> admin: Hiển thị lỗi username trùng
        end
    end

    == Cập nhật thông tin ==
    userService -> userService: Update User entity:\n- user.setUsername(newUsername)\n- user.setEmail(newEmail)\n- user.setFullName(newFullName)\n- user.setActive(newIsActive)\n- user.setUpdatedAt(now())


    userService -> repository: save(updatedUser)
    activate repository
    repository -> db: Truy vấn
    db --> repository: Updated User entity
    repository --> userService: User entity
    deactivate repository

    userService -> userService: Convert User to UserDto
    userService --> controller: Updated UserDto
    deactivate userService

    controller --> service: 200 OK\n{"id": 123, "username": "...", ...}
    deactivate controller
    service --> frontend: Success response
    deactivate service

    frontend -> frontend: message.success("Cập nhật giảng viên thành công")
    frontend -> frontend: setIsModalVisible(false)
    frontend -> frontend: setEditingTeacher(null)
    frontend -> frontend: fetchTeachers() - Refresh danh sách
    frontend -> admin: Đóng modal, hiển thị thông tin đã cập nhật
end
deactivate frontend

@enduml