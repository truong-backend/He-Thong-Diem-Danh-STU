package vn.diemdanh.hethong.service;

import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import vn.diemdanh.hethong.dto.admin.AdminDto;
import vn.diemdanh.hethong.dto.admin.CreateAdminRequest;
import vn.diemdanh.hethong.dto.admin.UpdateAdminRequest;
import vn.diemdanh.hethong.dto.sinhvien.CreateSinhVienRequest;
import vn.diemdanh.hethong.dto.sinhvien.SinhVienExcelDto;
import vn.diemdanh.hethong.entity.Admin;
import vn.diemdanh.hethong.entity.SinhVien;
import vn.diemdanh.hethong.exception.forgot_password.ResourceNotFoundException;
import vn.diemdanh.hethong.repository.AdminRepository;
import vn.diemdanh.hethong.repository.LopRepository;
import vn.diemdanh.hethong.repository.SinhVienRepository;
import vn.diemdanh.hethong.security.CustomAdminDetails;

import java.time.Instant;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@Service
public class AdminService implements UserDetailsService {

    @Autowired
    private AdminRepository adminRepository;

    @Autowired
    private PasswordEncoder passwordEncoder;

    @Autowired
    private LopRepository lopRepository;

    @Autowired
    private SinhVienRepository sinhVienRepository;

    @Autowired
    private SinhVienService sinhVienService;

    // ============================= Authentication ============================= //

    @Override
    public UserDetails loadUserByUsername(String email) {
        Admin admin = adminRepository.findByEmail(email)
                .orElseThrow(() -> new UsernameNotFoundException("Không tìm thấy admin với email: " + email));
        return new CustomAdminDetails(admin);
    }

    public UserDetails loadAdminById(Integer adminId) {
        Admin admin = getAdminById(adminId);
        return new CustomAdminDetails(admin);
    }

    public Admin getAdminById(Integer adminId) {
        return adminRepository.findById(adminId)
                .orElseThrow(() -> new UsernameNotFoundException("Không tìm thấy admin với ID: " + adminId));
    }

    // ============================= CRUD Admin ============================= //

    public Page<AdminDto> getAllAdmins(Pageable pageable) {
        return adminRepository.findAll(pageable).map(this::convertToDto);
    }

    public Optional<AdminDto> getAdminDtoById(Integer id) {
        return adminRepository.findById(id).map(this::convertToDto);
    }

    public AdminDto createAdmin(@Valid CreateAdminRequest request) {
        if (adminRepository.findByEmail(request.getEmail()).isPresent()) {
            throw new RuntimeException("Email đã tồn tại trong hệ thống");
        }

        if (adminRepository.findByUsername(request.getUsername()).isPresent()) {
            throw new RuntimeException("Username đã tồn tại trong hệ thống");
        }

        Admin admin = Admin.builder()
                .username(request.getUsername())
                .email(request.getEmail())
                .fullName(request.getFullName())
                .role(request.getRole())
                .password(passwordEncoder.encode(request.getPassword()))
                .createdAt(Instant.now())
                .updatedAt(Instant.now())
                .build();

        return convertToDto(adminRepository.save(admin));
    }

    public AdminDto updateAdmin(Integer id, @Valid UpdateAdminRequest request) {
        Admin admin = adminRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Không tìm thấy admin với ID: " + id));

        // Check Email trùng
        if (request.getEmail() != null) {
            Optional<Admin> existingByEmail = adminRepository.findByEmail(request.getEmail());
            if (existingByEmail.isPresent() && !existingByEmail.get().getId().equals(id)) {
                throw new RuntimeException("Email đã tồn tại trong hệ thống");
            }
            admin.setEmail(request.getEmail());
        }

        // Check Username trùng
        if (request.getUsername() != null) {
            Optional<Admin> existingByUsername = adminRepository.findByUsername(request.getUsername());
            if (existingByUsername.isPresent() && !existingByUsername.get().getId().equals(id)) {
                throw new RuntimeException("Username đã tồn tại trong hệ thống");
            }
            admin.setUsername(request.getUsername());
        }

        if (request.getFullName() != null) {
            admin.setFullName(request.getFullName());
        }

        if (request.getPassword() != null && !request.getPassword().isBlank()) {
            admin.setPassword(passwordEncoder.encode(request.getPassword()));
        }

        admin.setRole(request.getRole());
        admin.setUpdatedAt(Instant.now());

        return convertToDto(adminRepository.save(admin));
    }

    public void deleteAdmin(Integer id) {
        Admin admin = adminRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Không tìm thấy admin với ID: " + id));
        adminRepository.delete(admin);
    }

    // ============================= Import Sinh Viên ============================= //

    @Transactional
    public void saveImportData(List<SinhVienExcelDto> sinhVienExcelDtos) {
        for (SinhVienExcelDto dto : sinhVienExcelDtos) {
            try {
                CreateSinhVienRequest request = convertToCreateRequest(dto);
                sinhVienService.createSinhVien(request);
            } catch (Exception e) {
                System.err.println("Lỗi khi thêm sinh viên mã: " + dto.getMaSv() + " -> " + e.getMessage());
            }
        }
    }

    public List<SinhVienExcelDto> getAllSinhVienForExcel() {
        return sinhVienRepository.findAll().stream()
                .map(sv -> new SinhVienExcelDto(
                        sv.getMaSv(),
                        sv.getTenSv(),
                        sv.getNgaySinh(),
                        sv.getPhai(),
                        sv.getDiaChi(),
                        sv.getSdt(),
                        sv.getEmail(),
                        sv.getMaLop().getMaLop(),
                        sv.getAvatar()
                ))
                .collect(Collectors.toList());
    }

    private CreateSinhVienRequest convertToCreateRequest(SinhVienExcelDto excelDto) {
        return CreateSinhVienRequest.builder()
                .maSv(excelDto.getMaSv())
                .tenSv(excelDto.getTenSv())
                .ngaySinh(excelDto.getNgaySinh())
                .phai(excelDto.getPhai())
                .diaChi(excelDto.getDiaChi())
                .sdt(excelDto.getSdt())
                .email(excelDto.getEmail())
                .maLop(excelDto.getMaLop())
                .createAccount(true)
                .build();
    }

    // ============================= Tiện ích ============================= //

    public List<Admin> findAll() {
        return adminRepository.findAll();
    }

    private AdminDto convertToDto(Admin admin) {
        return new AdminDto(
                admin.getId(),
                admin.getUsername(),
                admin.getEmail(),
                admin.getFullName(),
                admin.getRole(),
                admin.getAvatar(),
                admin.getCreatedAt(),
                admin.getUpdatedAt()
        );
    }
}
