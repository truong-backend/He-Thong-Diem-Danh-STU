package vn.diemdanh.hethong.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.*;
import org.springframework.stereotype.Service;
import vn.diemdanh.hethong.dto.diemdanh.MonHocSinhVienDto;
import vn.diemdanh.hethong.dto.lichhoc.LichHocTheoThuDto;
import vn.diemdanh.hethong.dto.monhoc.MonHocDto;
import vn.diemdanh.hethong.dto.monhoc.MonHocGiangVienDTO;
import vn.diemdanh.hethong.dto.monhoc.MonHocKetQuaDiemDanhDTO;
import vn.diemdanh.hethong.dto.monhoc.NhomMonHocDTO;
import vn.diemdanh.hethong.dto.tkb.ThoiKhoaBieuDTO;
import vn.diemdanh.hethong.entity.MonHoc;
import vn.diemdanh.hethong.repository.MonHocRepository;

import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@Service
public class MonHocService {

    @Autowired
    private MonHocRepository monHocRepository;

    // ========== BUSINESS LOGIC METHODS ==========

    /**
     * Tạo môn học mới
     */
    public MonHocDto createMonHoc(MonHocDto request) {
        // Kiểm tra mã môn học đã tồn tại
        if (monHocRepository.findById(request.getMaMh()).isPresent()) {
            throw new IllegalArgumentException("Mã môn học đã tồn tại");
        }

        // Validate số tiết
        if (request.getSoTiet() <= 0) {
            throw new IllegalArgumentException("Số tiết phải lớn hơn 0");
        }

        MonHoc monHoc = new MonHoc();
        monHoc.setMaMh(request.getMaMh());
        monHoc.setTenMh(request.getTenMh());
        monHoc.setSoTiet(request.getSoTiet());

        monHoc = monHocRepository.save(monHoc);
        return convertToDto(monHoc);
    }

    /**
     * Lấy danh sách môn học có phân trang
     */
    public Page<MonHocDto> getMonHocList(int page, int size, String sortBy, String sortDir) {
        // Validate sort field
        if (!isValidSortField(sortBy)) {
            throw new IllegalArgumentException("Trường sắp xếp không hợp lệ");
        }

        Pageable pageable = PageRequest.of(page, size, Sort.by(Sort.Direction.fromString(sortDir), sortBy));
        Page<MonHoc> monHocs = monHocRepository.findAll(pageable);
        return monHocs.map(this::convertToDto);
    }

    /**
     * Lấy thông tin môn học theo mã
     */
    public MonHocDto getMonHocById(String maMh) {
        MonHoc monHoc = monHocRepository.findById(maMh)
                .orElseThrow(() -> new RuntimeException("Không tìm thấy môn học"));
        return convertToDto(monHoc);
    }

    /**
     * Lấy tất cả môn học không phân trang
     */
    public List<MonHocDto> getAllMonHocWithoutPaging() {
        return monHocRepository.findAll(Sort.by("maMh"))
                .stream()
                .map(this::convertToDto)
                .collect(Collectors.toList());
    }

    /**
     * Cập nhật môn học
     */
    public MonHocDto updateMonHoc(String maMh, MonHocDto request) {
        MonHoc monHoc = monHocRepository.findById(maMh)
                .orElseThrow(() -> new RuntimeException("Không tìm thấy môn học"));

        // Validate số tiết
        if (request.getSoTiet() <= 0) {
            throw new IllegalArgumentException("Số tiết phải lớn hơn 0");
        }

        monHoc.setTenMh(request.getTenMh());
        monHoc.setSoTiet(request.getSoTiet());

        monHoc = monHocRepository.save(monHoc);
        return convertToDto(monHoc);
    }

    /**
     * Xóa môn học
     */
    public void deleteMonHoc(String maMh) {
        MonHoc monHoc = monHocRepository.findById(maMh)
                .orElseThrow(() -> new RuntimeException("Không tìm thấy môn học"));
        monHocRepository.delete(monHoc);
    }

    // ========== EXISTING METHODS ==========

    public List<MonHocKetQuaDiemDanhDTO> getMonHocKetQuaDiemDanh() {
        List<Object[]> results = monHocRepository.getMonHocForDiemDanh();
        return results.stream().map(monhoc -> {
            MonHocKetQuaDiemDanhDTO dto = new MonHocKetQuaDiemDanhDTO();
            dto.setMaGd((Integer) monhoc[0]);
            dto.setMaMh((String) monhoc[1]);
            dto.setTenMh((String) monhoc[2]);
            dto.setPhongHoc((String) monhoc[3]);
            dto.setNmh((Integer) monhoc[4]);
            return dto;
        }).collect(Collectors.toList());
    }

    /**
     * Lấy danh sách môn học của giảng viên
     */
    public List<MonHocGiangVienDTO> getSubjectsByTeacher(String maGv, Integer hocKy, Integer namHoc) {
        List<Object[]> results = monHocRepository.findSubjectsByTeacher(maGv, hocKy, namHoc);

        return results.stream()
                .map(row -> MonHocGiangVienDTO.builder()
                        .maMh((String) row[0])
                        .tenMh((String) row[1])
                        .hocKy((Integer) row[2])
                        .namHoc(((Number) row[3]).intValue())
                        .build())
                .collect(Collectors.toList());
    }

    /**
     * Lấy danh sách nhóm môn học
     */
    public List<NhomMonHocDTO> getSubjectGroups(String maGv, String maMh, Integer hocKy, Integer namHoc) {
        List<Object[]> results = monHocRepository.findSubjectGroups(maGv, maMh, hocKy, namHoc);

        return results.stream()
                .map(row -> NhomMonHocDTO.builder()
                        .maGd((Integer) row[0])
                        .nhomMonHoc((Integer) row[1])
                        .tenMh((String) row[2])
                        .phongHoc((String) row[3])
                        .ngayBd(((java.sql.Date) row[4]).toLocalDate())
                        .ngayKt(((java.sql.Date) row[5]).toLocalDate())
                        .caHoc((String) row[6])
                        .build())
                .collect(Collectors.toList());
    }

    /**
     * Lấy danh sách môn học của sinh viên
     */
    public List<MonHocSinhVienDto> getMonHocCuaSinhVien(String maSv) {
        List<Object[]> results = monHocRepository.findMonHocByMaSv(maSv);

        return results.stream()
                .map(r -> MonHocSinhVienDto.builder()
                        .maMh((String) r[0])
                        .tenMh((String) r[1])
                        .soTiet(((Number) r[2]).intValue())
                        .nmh((Integer) r[3])
                        .hocKy((Integer) r[4])
                        .phongHoc((String) r[5])
                        .ngayBd(((java.sql.Date) r[6]))
                        .ngayKt(((java.sql.Date) r[7]))
                        .build())
                .collect(Collectors.toList());
    }

    /**
     * Lấy lịch học theo thứ
     */
    public List<LichHocTheoThuDto> getLichHocTheoThu(int thu) {
        List<Object[]> results = monHocRepository.findLichHocByThu(thu);

        return results.stream()
                .map(row -> LichHocTheoThuDto.builder()
                        .tenMonHoc((String) row[0])
                        .tenGiaoVien((String) row[1])
                        .ngayHoc((Date) row[2])
                        .tietBatDau(((Number) row[3]).intValue())
                        .tietKetThuc(((Number) row[4]).intValue())
                        .build())
                .collect(Collectors.toList());
    }

    /**
     * Lấy thời khóa biểu theo mã sinh viên
     */
    public List<ThoiKhoaBieuDTO> getThoiKhoaBieuByMaSv(String maSv) {
        List<Object[]> rawList = monHocRepository.findThoiKhoaBieuByMaSv(maSv);

        return rawList.stream().map(obj -> ThoiKhoaBieuDTO.builder()
                .maMonHoc((String) obj[0])
                .tenMonHoc((String) obj[1])
                .nhomMonHoc(((Number) obj[2]).intValue())
                .soTiet(((Number) obj[3]).intValue())
                .maLop((String) obj[4])
                .thu(((Number) obj[5]).intValue())
                .tietBD(((Number) obj[6]).intValue())
                .phong((String) obj[7])
                .tenGiaoVien((String) obj[8])
                .tuanNgayBatDauKetThuc((String) obj[9])
                .build()
        ).collect(Collectors.toList());
    }

    /**
     * Lấy môn học theo học kỳ và năm
     */
    public List<MonHocDto> getMonHocByHocKyAndNam(Integer hocKy, Integer namHoc) {
        List<Object[]> results = monHocRepository.findMonHocByHocKyAndNam(hocKy, namHoc);
        return results.stream()
                .map(row -> MonHocDto.builder()
                        .maMh((String) row[0])
                        .tenMh((String) row[1])
                        .soTiet((Integer) row[2])
                        .build())
                .collect(Collectors.toList());
    }

    // ========== UTILITY METHODS ==========

    /**
     * Convert Entity to DTO
     */
    private MonHocDto convertToDto(MonHoc monHoc) {
        MonHocDto dto = new MonHocDto();
        dto.setMaMh(monHoc.getMaMh());
        dto.setTenMh(monHoc.getTenMh());
        dto.setSoTiet(monHoc.getSoTiet());
        return dto;
    }

    /**
     * Validate sort field
     */
    private boolean isValidSortField(String field) {
        return Arrays.asList("maMh", "tenMh", "soTiet").contains(field);
    }
}