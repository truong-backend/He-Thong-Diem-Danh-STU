package vn.diemdanh.hethong.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import vn.diemdanh.hethong.dto.user_managerment.UserDto;
import vn.diemdanh.hethong.entity.User;
import vn.diemdanh.hethong.service.user_man_and_login.UserService;
import org.springframework.http.HttpStatus;
import java.util.List;
import java.util.stream.Collectors;

@RestController
@RequestMapping("/api/users")
public class UserController {

    @Autowired
    private UserService userService;

    @GetMapping
    public ResponseEntity<Page<UserDto>> getAllUsers(
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "10") int size,
            @RequestParam(defaultValue = "id") String sortBy,
            @RequestParam(defaultValue = "asc") String sortDir,
            @RequestParam(required = false) String search) {

        Sort sort = sortDir.equalsIgnoreCase("desc") ?
                Sort.by(sortBy).descending() :
                Sort.by(sortBy).ascending();

        Pageable pageable = PageRequest.of(page, size, sort);
        Page<User> userPage;
        
        if (search != null && !search.isEmpty()) {
            userPage = userService.searchUsers(search, pageable);
        } else {
            userPage = userService.getAllUsers(pageable);
        }
        
        Page<UserDto> dtoPage = userPage.map(this::convertToDto);
        return ResponseEntity.ok(dtoPage);
    }

    @GetMapping("/{id}")
    public ResponseEntity<UserDto> getUserById(@PathVariable Long id) {
        User user = userService.getUserById(id);
        UserDto userDto = convertToDto(user);
        return ResponseEntity.ok(userDto);
    }

    @GetMapping("/email/{email}")
    public ResponseEntity<UserDto> getUserByEmail(@PathVariable String email) {
        User user = userService.getCurrentUser(email);
        UserDto userDto = convertToDto(user);
        return ResponseEntity.ok(userDto);
    }

    @PostMapping
    public ResponseEntity<UserDto> createUser(@RequestBody UserDto userDto) {
        User user = userService.createUser(userDto);
        return new ResponseEntity<>(convertToDto(user), HttpStatus.CREATED);
    }

    @PutMapping("/{id}")
    public ResponseEntity<UserDto> updateUser(@PathVariable Long id, @RequestBody UserDto userDto) {
        User updatedUser = userService.updateUser(id, userDto);
        return ResponseEntity.ok(convertToDto(updatedUser));
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteUser(@PathVariable Long id) {
        userService.deleteUser(id);
        return ResponseEntity.noContent().build();
    }

    private UserDto convertToDto(User user) {
        UserDto dto = new UserDto();
        dto.setId(user.getId());
        dto.setUsername(user.getUsername());
        dto.setEmail(user.getEmail());
        dto.setRole(user.getRole());
        
        // Set user type and full name based on relationships
        if (user.getMaSv() != null) {
            dto.setUserType("SINH_VIEN");
            dto.setFullName(user.getMaSv().getTenSv());
        } else if (user.getMaGv() != null) {
            dto.setUserType("GIAO_VIEN");
            dto.setFullName(user.getMaGv().getTenGv());
        }

        dto.setActive(true); // You might want to add an 'active' field to User entity
        dto.setCreatedAt(user.getCreatedAt());
        dto.setUpdatedAt(user.getUpdatedAt());
        dto.setEmailVerifiedAt(user.getEmailVerifiedAt());

        return dto;
    }
    // Get users by role
//    @GetMapping("/role/{role}")
//    public ResponseEntity<Page<UserDto>> getUsersByRole(
//            @PathVariable String role,
//            @RequestParam(defaultValue = "0") int page,
//            @RequestParam(defaultValue = "10") int size,
//            @RequestParam(defaultValue = "id") String sortBy,
//            @RequestParam(defaultValue = "asc") String sortDir,
//            @RequestParam(required = false) String search) {
//
//        Pageable pageable = PageRequest.of(page, size,
//                sortDir.equalsIgnoreCase("asc") ? Sort.by(sortBy).ascending()
//                        : Sort.by(sortBy).descending());
//
//        Page<User> userPage;
//        if (search != null && !search.trim().isEmpty()) {
////            userPage = userService.searchUsersByRole(role, search, pageable);
//        } else {
//            userPage = userService.getUsersByRole(role, pageable);
//        }
//
//        Page<UserDto> userDtoPage = userPage.map(this::convertToDto);
//        return ResponseEntity.ok(userDtoPage);
//    }
//
}