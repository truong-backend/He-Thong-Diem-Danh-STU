    package vn.diemdanh.hethong.controller.catalog;

    import jakarta.validation.Valid;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.data.domain.Page;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.*;
    import vn.diemdanh.hethong.dto.lop.LopDto;
    import vn.diemdanh.hethong.service.LopService;

    import java.util.List;

    @RestController
    @RequestMapping("/api/lop")
    public class LopController {
    
        @Autowired
        private LopService lopService;

        // CREATE - Thêm lớp mới
        @PostMapping
        public ResponseEntity<?> createLop(@Valid @RequestBody LopDto request) {
            try {
                LopDto dto = lopService.createLop(request);
                return ResponseEntity.ok(dto);
            } catch (RuntimeException e) {
                return ResponseEntity.badRequest().body("Lỗi khi thêm lớp: " + e.getMessage());
            }
        }

        // READ - Lấy danh sách lớp có phân trang và sắp xếp
        @GetMapping
        public ResponseEntity<?> getLopList(
                @RequestParam(defaultValue = "0") int page,
                @RequestParam(defaultValue = "10") int size,
                @RequestParam(defaultValue = "maLop") String sortBy,
                @RequestParam(defaultValue = "asc") String sortDir,
                @RequestParam(required = false) String maKhoa
        ) {
            try {
                Page<LopDto> dtoPage = lopService.getLopList(page, size, sortBy, sortDir, maKhoa);
                return ResponseEntity.ok(dtoPage);
            } catch (RuntimeException e) {
                return ResponseEntity.badRequest().body("Lỗi khi lấy danh sách lớp: " + e.getMessage());
            }
        }

        // READ - Lấy toàn bộ lớp (không phân trang)
        @GetMapping("/all")
        public ResponseEntity<?> getAllLops() {
            try {
                List<LopDto> dtos = lopService.getAllLops();
                return ResponseEntity.ok(dtos);
            } catch (RuntimeException e) {
                return ResponseEntity.badRequest().body("Lỗi khi lấy danh sách lớp: " + e.getMessage());
            }
        }

        // READ - Lấy thông tin một lớp
        @GetMapping("/{maLop}")
        public ResponseEntity<?> getLop(@PathVariable String maLop) {
            try {
                LopDto dto = lopService.getLopById(maLop);
                return ResponseEntity.ok(dto);
            } catch (RuntimeException e) {
                return ResponseEntity.badRequest().body("Lỗi khi lấy thông tin lớp: " + e.getMessage());
            }
        }

        // UPDATE - Cập nhật thông tin lớp
        @PutMapping("/{maLop}")
        public ResponseEntity<?> updateLop(@PathVariable String maLop, @Valid @RequestBody LopDto request) {
            try {
                LopDto dto = lopService.updateLop(maLop, request);
                return ResponseEntity.ok(dto);
            } catch (RuntimeException e) {
                return ResponseEntity.badRequest().body("Lỗi khi cập nhật lớp: " + e.getMessage());
            }
        }

        // DELETE - Xóa lớp
        @DeleteMapping("/{maLop}")
        public ResponseEntity<?> deleteLop(@PathVariable String maLop) {
            try {
                lopService.deleteLop(maLop);
                return ResponseEntity.ok("Xóa lớp thành công");
            } catch (RuntimeException e) {
                return ResponseEntity.badRequest().body("Lỗi khi xóa lớp: " + e.getMessage());
            }
        }
    }
