package vn.diemdanh.hethong.controller.catalog;

import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;
import vn.diemdanh.hethong.dto.khoa.KhoaDto;
import vn.diemdanh.hethong.entity.Khoa;
import vn.diemdanh.hethong.service.KhoaService;

import java.util.List;

@RestController
@RequestMapping("/api/khoa")
public class KhoaController {

    @Autowired
    private KhoaService khoaService;

    // ============================== CREATE ==============================

    @PreAuthorize("hasRole('admin')")
    @PostMapping
    public ResponseEntity<?> createKhoa(@Valid @RequestBody KhoaDto request) {
        try {
            KhoaDto result = khoaService.createKhoa(request);
            return ResponseEntity.ok(result);
        } catch (Exception e) {
            return ResponseEntity.badRequest().body("Lỗi khi thêm khoa: " + e.getMessage());
        }
    }

    // ============================== READ ==============================

    @PreAuthorize("hasRole('admin')")
    @GetMapping
    public ResponseEntity<?> getKhoaList(
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "10") int size,
            @RequestParam(defaultValue = "maKhoa") String sortBy,
            @RequestParam(defaultValue = "asc") String sortDir
    ) {
        try {
            Page<KhoaDto> result = khoaService.getKhoaList(page, size, sortBy, sortDir);
            return ResponseEntity.ok(result);
        } catch (Exception e) {
            return ResponseEntity.badRequest().body("Lỗi khi lấy danh sách khoa: " + e.getMessage());
        }
    }

    @PreAuthorize("hasRole('teacher')")
    @GetMapping("/all")
    public ResponseEntity<?> getAllKhoa() {
        try {
            List<KhoaDto> result = khoaService.getAllKhoa();
            return ResponseEntity.ok(result);
        } catch (Exception e) {
            return ResponseEntity.badRequest().body("Lỗi khi lấy danh sách khoa: " + e.getMessage());
        }
    }

    @PreAuthorize("hasRole('admin')")
    @GetMapping("/{maKhoa}")
    public ResponseEntity<?> getKhoaById(@PathVariable String maKhoa) {
        try {
            Khoa result = khoaService.getKhoaById(maKhoa);
            return ResponseEntity.ok(result);
        } catch (Exception e) {
            return ResponseEntity.badRequest().body("Lỗi khi lấy thông tin khoa: " + e.getMessage());
        }
    }

    // ============================== UPDATE ==============================

    @PreAuthorize("hasRole('admin')")
    @PutMapping("/{maKhoa}")
    public ResponseEntity<?> updateKhoa(
            @PathVariable String maKhoa,
            @Valid @RequestBody KhoaDto request
    ) {
        try {
            KhoaDto result = khoaService.updateKhoa(maKhoa, request);
            return ResponseEntity.ok(result);
        } catch (Exception e) {
            return ResponseEntity.badRequest().body("Lỗi khi cập nhật khoa: " + e.getMessage());
        }
    }

    // ============================== DELETE ==============================

    @PreAuthorize("hasRole('admin')")
    @DeleteMapping("/{maKhoa}")
    public ResponseEntity<?> deleteKhoa(@PathVariable String maKhoa) {
        try {
            khoaService.deleteKhoa(maKhoa);
            return ResponseEntity.ok("Xóa khoa thành công");
        } catch (Exception e) {
            return ResponseEntity.badRequest().body("Lỗi khi xóa khoa: " + e.getMessage());
        }
    }
}